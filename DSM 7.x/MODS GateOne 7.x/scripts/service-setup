### Package specific variables and functions
# Base service USER to run background process prefixed according to DSM
USER="gateone"
GROUP="gateone"
PRIV_PREFIX=sc-
SYNOUSER_PREFIX=svc-
if [ -n "${SYNOPKG_DSM_VERSION_MAJOR}" -a "${SYNOPKG_DSM_VERSION_MAJOR}" -lt 6 ]; then 
    EFF_USER="${SYNOUSER_PREFIX}${USER}"
else 
    EFF_USER="${PRIV_PREFIX}${USER}"
fi

# start-stop-status script redirect stdout/stderr to LOG_FILE
INST_LOG="/tmp/${SYNOPKG_PKGNAME}"

# Service command has to deliver its pid into PID_FILE
PID_FILE="${SYNOPKG_PKGDEST}/var/${SYNOPKG_PKGNAME}.pid"

# Invoke shell function if available
call_func ()
{
    FUNC=$1
    if type "$FUNC" | grep -q 'function' 2>/dev/null; then
        echo "Invoke $FUNC"
        eval ${FUNC}
    fi
}

PYTHON_DIR="/usr"
PATH="${SYNOPKG_PKGDEST}/bin:${SYNOPKG_PKGDEST}/env/bin:${PYTHON_DIR}/bin:${PATH}"
PYTHON="${SYNOPKG_PKGDEST}/env/bin/python"
VIRTUALENV="${PYTHON_DIR}/bin/virtualenv"
GATEONE="${SYNOPKG_PKGDEST}/env/bin/gateone"
SETTINGS_DIR="${SYNOPKG_PKGDEST}/var/conf.d"
CONF_FILE="${SYNOPKG_PKGDEST}/var/conf.d/90custom.conf"
if [ $SYNOPKG_DSM_VERSION_MAJOR -ge 6 ]; then
    CERTPATH="/usr/syno/etc/certificate/system/default/"
    CERTIFICATE="cert.pem"
    KEYPATH="/usr/syno/etc/certificate/system/default/"
    KEYFILE="privkey.pem"
else
    CERTPATH="/usr/syno/etc/ssl/ssl.crt/"
    CERTIFICATE="server.crt"
    KEYPATH="/usr/syno/etc/ssl/ssl.key/"
    KEYFILE="server.key"
fi
SSL_DIR="${SYNOPKG_PKGDEST}/ssl/"

SERVICE_COMMAND="${PYTHON} ${GATEONE} --settings_dir=${SETTINGS_DIR} --session_dir=/tmp"
SVC_BACKGROUND=yes
SVC_WRITE_PID=yes

service_postinst ()
{
    echo ""
    echo ""
    echo "Execute Service-Setup Postinst"
    echo "------------------------------"
    echo "Running as `whoami`"
  
    # Install virtual env if it does not exist
    if ! [ -x "$(command -v virtualenv)" ]; then
    
        # Install pip if it does not exist
        if ! [ -x "$(command -v pip)" ]; then
            cd /tmp 2>&1
            echo "Installing pip..."
            wget https://bootstrap.pypa.io/get-pip.py 2>&1
            python2 get-pip.py 2>&1
            rm -f get-pip.py 2>&1
        fi

        # Install virtualenv
        echo "Installing virtualenv..."
        pip install virtualenv 2>&1
    fi

    # Create a Python virtualenv
    echo "Creating Python virtualenv..."
    ${VIRTUALENV} --system-site-packages ${SYNOPKG_PKGDEST}/env 2>&1

    # Install the wheels
    echo "Installing wheels..."
    sudo ${SYNOPKG_PKGDEST}/env/bin/pip install --no-deps --no-index -U --force-reinstall -f ${SYNOPKG_PKGDEST}/share/wheelhouse ${SYNOPKG_PKGDEST}/share/wheelhouse/*.whl > ${INST_LOG}.wheels 2>&1

    # Install GateOne
    echo "Installing Gateone"
    sudo ${PYTHON} ${SYNOPKG_PKGDEST}/share/gateone/setup.py install --prefix=${SYNOPKG_PKGDEST}/env --skip_init_scripts > ${INST_LOG}.gateone 2>&1

    # Install initial certificates
    echo "Installing initial certificates..."
    $CP "${CERTPATH}${CERTIFICATE}" "${KEYPATH}${KEYFILE}" ${SSL_DIR}
    sed -i -e "s,@certificate@,${SSL_DIR}${CERTIFICATE},g" ${CONF_FILE}
    sed -i -e "s,@keyfile@,${SSL_DIR}${KEYFILE},g" ${CONF_FILE}

    # Fix permissions
    set_unix_permissions "${SYNOPKG_PKGDEST}/ssl"
    set_unix_permissions "${SYNOPKG_PKGDEST}/env"

    # Discard legacy obsolete busybox user account
    #BIN=${SYNOPKG_PKGDEST}/bin
    #$BIN/busybox --install $BIN
    #$BIN/delgroup "${USER}" "users"
    #$BIN/deluser "${USER}"
}

service_preupgrade ()
{    
    echo ""
    echo ""
    echo "Execute Service-Setup Preupgrade"
    echo "--------------------------------"
    echo "Running as `whoami`"
	
    # Revision 5 introduces backward incompatible changes
    if [ `echo ${SYNOPKG_OLD_PKGVER} | sed -r "s/^.*-([0-9]+)$/\1/"` -le 4 ]; then
        echo "Please uninstall previous version, no update possible.<br>Remember to save your ${INSTALL_DIR}/var/server.conf file before uninstalling.<br>You will need to manually port old configuration settings to the new configuration files."
        exit 1
    fi
}

service_preinst ()
{	
    echo ""
    echo ""
    echo "Execute Service-Setup Preinst"
    echo "-----------------------------"
    echo "Running as `whoami`"
}

service_preuninst ()
{	
    echo ""
    echo ""
    echo "Execute Service-Setup Preuninst"
    echo "-------------------------------"
    echo "Running as `whoami`"
}

service_postuninst ()
{
    echo ""
    echo ""
    echo "Execute Service-Setup postuninst"
    echo "--------------------------------"
    echo "Running as `whoami`"
}

service_postupgrade ()
{
    echo ""
    echo ""
    echo "Execute Service-Setup Postupgrade"
    echo "---------------------------------"
    echo "Running as `whoami`"
}

service_prestart ()
{
    echo ""
    echo ""
    echo "Execute Service-Setup Prestart"
    echo "------------------------------"
    echo "Running as `whoami`"
}