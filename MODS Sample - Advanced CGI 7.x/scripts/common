#!/bin/sh

# HELP to use this common file within MODS
#------------------------------------------
# Add these two lines at the begining of each installation/upgrade/uninstallation scripts (NOT in the WIZARD shell scripts):
#. `dirname $0`/common `basename $0` $*
#StartScript

# Add this line at the end of each WIZARD shell scripts, before the 'exit 0':
#EndScript

# Add these lines at the begining of each WIZARD shell scripts:
#. `dirname $0`/../scripts/common `basename $0` $*
#StartWizard

# Add this line at the end of each WIZARD shell scripts, before the 'exit 0':
#EndWizard

# You can use these scripts from a command shell with:
#cd /var/packages/<Your Package>/scripts
#. ./common

#Once the scripts loaded in the shell, you can continue to use them even after package uninstallation, as for example to display the logs:
#ShowLog -f -k

# Define temporary Log and Err files
if [ -z $SYNOPKG_PKGNAME ]; then
	# Define variables to be able to run from a -sh instead of being run from Synology installer
	SYNOPKG_PKGNAME="$(pwd | cut -d '/' -f4)"
	if [ -z $SYNOPKG_PKGNAME ]; then
		SYNOPKG_PKGNAME="Dummy"
		SYNOPKG_PKGDEST="."
		SYNOPKG_TEMP_LOGFILE="/tmp/$SYNOPKG_PKGNAME.log"
	else
		SYNOPKG_PKGDEST="/var/packages/$SYNOPKG_PKGNAME/target"
	fi
fi
LOG="/tmp/$SYNOPKG_PKGNAME.log"
ERR="/tmp/$SYNOPKG_PKGNAME.err"
SEP="################################################################################################################################################################################"
WIZARD=0

# Show Logs
function ShowLog() {	
	param="$*"
	full=0
	keep=0
	
	# Check if logs display must be shorten
	if [[ $param =~ "-f" ]]; then full=1; fi
	
	# Check if logs must be kept after display
	if [[ $param =~ "-k" ]]; then keep=1; fi
	
	# If params are passed but no option are set, wrong usage
	if [ ! -z $param ] && [ full == 0 ] && [ keep == 0 ]; then
		LogInfo "Usage: ShowLog [options]"
		LogInfo "  -f: full display"
		LogInfo "  -l: keep logs after display"
	else
		if [ -f /var/log/packages/$SYNOPKG_PKGNAME.log ]; then
			if [ $full == 1 ]; then
				sudo cat /tmp/MODS* /var/log/packages/$SYNOPKG_PKGNAME.log
			else	
				sudo cat /tmp/MODS* /var/log/packages/$SYNOPKG_PKGNAME.log | grep -v "Begin /bin/" | grep -v "End /bin/"
			fi
			
			if [ $keep == 0 ]; then
				sudo rm -f /var/log/packages/$SYNOPKG_PKGNAME.log
			fi
			
			#rm -f /tmp/MODS*
		fi
	fi
}

# Execute a command via SSH on the local host, using a php script
function ExecSSH() {
	user=$1	# Admin account
	pass=$2	# Admin password
	port=$3 # SSH port
	cmd=$4	# Command to execute
	
	# Find the php version to be used 
	version=`php -v | grep "PHP " | cut -f2 -d " "`
	major=`echo $version | cut -d. -f1`
	minor=`echo $version | cut -d. -f2`
	
	if [ $0 == "-sh" ]; then
		# If run from a -sh, assume that the php script os local
		path="."
	else
		path="/var/packages/$SYNOPKG_PKGNAME/scripts"
	fi
	script="$path/exec.php"
		
	# Call PHP with ssh2 modules
	output="$(php -dextension=/var/packages/PHP$major.$minor/target/usr/local/lib/php$major$minor/modules/ssh2.so "$script" -u "$user" -p "$pass" -s "127.0.0.1" -o "$port" -c "$cmd")"
	ExitCode=$? #Do not add any line or comment between the command and this line retrieving its exit code!!
	
	LogInfo "$output"
	return $ExitCode
}

# Validate credentials to connect via SSH on the local host, using a php script
function CheckSSH() {
	user=$1	# Admin account
	pass=$2	# Admin password
	port=$3 # SSH port
	
	# Find the php version to be used 
	version=`php -v | grep "PHP " | cut -f2 -d " "`
	major=`echo $version | cut -d. -f1`
	minor=`echo $version | cut -d. -f2`
	
	if [ $0 == "-sh" ]; then
		# If run from a -sh, assume that the php script os local
		path="."
	else
		path="/var/packages/$SYNOPKG_PKGNAME/scripts"
	fi
	script="$path/check.php"
		
	# Call PHP with ssh2 modules
	output="$(php -dextension=/var/packages/PHP$major.$minor/target/usr/local/lib/php$major$minor/modules/ssh2.so "$script" -u "$user" -p "$pass" -s "127.0.0.1" -o "$port")"
	ExitCode=$? #Do not add any line of comment between the command and this line retrieving its exit code!!

	LogInfo "$output"
	return $ExitCode
}

# Link nginx to the package's config file defined to be able to run php scripts outside to web root folder
function LinkNginx() {
	if [ -f $SYNOPKG_PKGDEST/ui/router.cgi ]; then
		# Set the name of the package in the router cgi
		sed -i -e "s|@SYNOPKG_PKGNAME@|$SYNOPKG_PKGNAME|g" "$SYNOPKG_PKGDEST/ui/router.cgi"
	fi
	
	if [ -f $SYNOPKG_PKGDEST/ui/dsm.cgi.conf ]; then
		# Set the name of the package in the nginx config
		sed -i -e "s|@MODS_CGI@|$SYNOPKG_PKGNAME|g" "$SYNOPKG_PKGDEST/ui/dsm.cgi.conf"

		# Create a link for nginx onto the package nginx config
		LINK="/usr/syno/share/nginx/conf.d/dsm.$SYNOPKG_PKGNAME.conf"

		if [ -f $LINK ]; then
			LogInfo "Link to nginx config already exists."
		else
			# Check if SSH connection is working
			LogInfo "Checking SSH credentials"
			CheckSSH "$MODS_ADMIN" "$MODS_PASSWORD" "$MODS_PORT"
			ExitCode=$? #Do not add any line of comment between the command and this line retrieving its exit code!!
			
			if [ $ExitCode == 0 ]; then
			
				# Store Admin account and SSH port
				if [ ! -z $MODS_ADMIN ]; then
					echo "MODS_ADMIN=$MODS_ADMIN" > "/var/packages/$SYNOPKG_PKGNAME/etc/parameters"
					echo "MODS_PORT=$MODS_PORT" >> "/var/packages/$SYNOPKG_PKGNAME/etc/parameters"
					chmod og-r "/var/packages/$SYNOPKG_PKGNAME/etc/parameters"
				fi

				# Store Admin password if requested
				if [ $MODS_SAVE == "true" ]; then
					# Create a Private Key to encrypt the password
					if [ ! -f "/var/packages/$SYNOPKG_PKGNAME/etc/image" ]; then
						LogInfo "Creating Encryption Key"
						openssl genrsa -out /var/packages/$SYNOPKG_PKGNAME/etc/image 2048 2> /dev/null
					fi
					
					# Encrypt and store the password
					if [ ! -z $MODS_PASSWORD ]; then
						LogInfo "Encrypting Password"
						echo "$MODS_PASSWORD" | openssl rsautl -inkey /var/packages/$SYNOPKG_PKGNAME/etc/image -encrypt > /var/packages/$SYNOPKG_PKGNAME/etc/backup
						chmod og-r /var/packages/$SYNOPKG_PKGNAME/etc/backup
					fi
				else
					LogInfo "Don't store Password"
				fi

				# Create the Symbolic link
				LogInfo "Creating nginx Link"
				ExecSSH "$MODS_ADMIN" "$MODS_PASSWORD" "$MODS_PORT" "ln -s $SYNOPKG_PKGDEST/ui/dsm.cgi.conf $LINK"
				ExitCode=$?
				
				# Check that the link has been created
				if [ ! -f $LINK ]; then
					PublishInfo ""
					PublishInfo "Link Creation failed..."
					PublishInfo "Investigate the reason in the Logs"		
					exit 150
				fi 	
			else
			
				PublishInfo ""
				PublishInfo "Cannot connect via SSH onto the NAS with provided Login/Password."
				PublishInfo "Go back into the Installation Wizard to change your Login/Password."
				exit 150
			fi
		fi
	fi
}

# Unlink nginx config
function UnlinkNginx() {
	if [ $SYNOPKG_PKG_STATUS == "UNINSTALL" ]; then
		LINK="/usr/syno/share/nginx/conf.d/dsm.$SYNOPKG_PKGNAME.conf"

		if [ -f $LINK ]; then
			# Retrieve previous credentials if no account received from Wizard
			if [ -z $MODS_ADMIN ] && [ -f /var/packages/$SYNOPKG_PKGNAME/etc/backup ]; then			
				if [ -f /var/packages/$SYNOPKG_PKGNAME/etc/parameters ]; then			
					. /var/packages/$SYNOPKG_PKGNAME/etc/parameters
				fi

				if [ -z $MODS_PASSWORD ]; then
					LogInfo "Retrieving previous SSH credentials"
					MODS_PASSWORD=$(openssl rsautl -inkey /var/packages/$SYNOPKG_PKGNAME/etc/image -decrypt < /var/packages/$SYNOPKG_PKGNAME/etc/backup)			
				fi
			fi
			
			# Unlink nginx configuration
			LogInfo "Removing nginx Link"
			ExecSSH "$MODS_ADMIN" "$MODS_PASSWORD" "$MODS_PORT" "unlink $LINK"
			ExitCode=$?
			
			if [ -f $LINK ]; then
				PublishInfo
				PublishInfo "Couldn't remove the link '$Link'."
				PublishInfo "This is not a blocking issue but uninstallation is not clean."
			fi
		else
			LogInfo "Link to nginx config didn't exist."
		fi
		
		# Delete parameters created for this package
		LogInfo "Removing stored parameters"
		rm -f "/var/packages/$SYNOPKG_PKGNAME/etc/backup"
		rm -f "/var/packages/$SYNOPKG_PKGNAME/etc/image"
		rm -f "/var/packages/$SYNOPKG_PKGNAME/etc/parameters"
		rm -f "/var/packages/$SYNOPKG_PKGNAME/var/log/router.log"
		rm -df "/var/packages/$SYNOPKG_PKGNAME/var/log"
	fi
}

# Create a log file for the router.cgi
function EnableRouterLog() {
	if [ -f $SYNOPKG_PKGDEST/ui/router.cgi ]; then
		# create the Log dir if it does not exist
		DIR="/var/packages/$SYNOPKG_PKGNAME/var/log"
		if [ ! -d "$DIR" ]; then
			mkdir -p "$DIR"
		fi

		# create the Log file if it does not exist
		LGR="$DIR/router.log"
		if [ ! -f $LGR ]; then
			touch $LGR
		fi
	fi
}

function LogInfo() {
	TEXT=$*
	while read line; do
		if [ $WIZARD == 1 ]; then
			INFO=$line
		else
			INFO="$(date '+%Y/%m/%d %H:%M:%S')     ${SYNOPKG_PKG_STATUS,,} $SYNOPKG_PKGNAME $SYNOPKG_PKGVER $line"
			if [ "$line" == "#" ]; then
				INFO="$INFO$SEP"
				INFO=${INFO:0:210}
			fi
		fi
		echo "$INFO"
	done <<< "$TEXT"
}

function PublishInfo() {
	LogInfo $*
	#if the file $SYNOPKG_TEMP_LOGFILE is not empty, the user will be prompted with its content.
	# make the log pretty to be displayed (replace LF with html <br>)
	echo "$*" | sed 's/$/<br>/g' >> $SYNOPKG_TEMP_LOGFILE
}

function StartScript() {
	WIZARD=0
	if [ $0 != "-sh" ]; then
		# Save the streams stderr
		exec 5<&2

		# Redirect the stream stderr to its logs
		exec 2>>$ERR
	fi
	
	if [ -s $LOG ]; then
		LogInfo "$(< $LOG)"
		rm -f $LOG
	fi
	if [ -s $ERR ]; then
		LogInfo "Error Log:"
		LogInfo "$(< $ERR)"
		rm -f $ERR
	fi
	LogInfo "#"
	LogInfo "Executing $0 $SYNOPKG_PKG_STATUS"
}

function EndScript() {
	if [ -s $ERR ]; then
		LogInfo "Error Log:"
		LogInfo "$(< $ERR)"
		rm -f $ERR
	fi
	if [ -z $0 ]; then
		LogInfo "Ending Script Execution"
	else
		LogInfo "Ending `basename $0` $SYNOPKG_PKG_STATUS"
	fi
	
	if [ $0 != "-sh" ]; then
		# Restore the streams stderr
		exec 2<&5
	fi
}

function StartWizard() {
	WIZARD=1
	# Save the streams stdout and stderr
	if [ $0 != "-sh" ]; then
		exec 4<&1
		exec 5<&2

		# Redirect the stream stdout and stderr to their own logs
		exec 2>>$ERR
		exec 1>>$LOG
	fi
	
	LogInfo "#"
	LogInfo "Executing $0 $SYNOPKG_PKG_STATUS"
}

function EndWizard() {
	# Restore the streams stdout and stderr
	if [ $0 != "-sh" ]; then
		exec 1<&4
		exec 2<&5
	fi
}